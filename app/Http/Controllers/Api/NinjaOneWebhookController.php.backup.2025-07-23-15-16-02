<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use App\Models\Device;
use App\Models\NinjaOneAlert;
use App\Models\Ticket;
use App\Services\NinjaOneService;
use App\Services\NotificationService;
use Illuminate\Http\Request;
use Illuminate\Http\JsonResponse;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Validator;
use Exception;

class NinjaOneWebhookController extends Controller
{
    protected $ninjaOneService;
    protected $notificationService;

    public function __construct(NinjaOneService $ninjaOneService, NotificationService $notificationService)
    {
        $this->ninjaOneService = $ninjaOneService;
        $this->notificationService = $notificationService;
    }

    /**
     * Handle incoming webhook from NinjaOne
     */
    public function handleWebhook(Request $request): JsonResponse
    {
        try {
            // Log incoming webhook for debugging
            Log::info('NinjaOne webhook received', [
                'headers' => $request->headers->all(),
                'body' => $request->all()
            ]);

            // Validate webhook signature if configured
            if (!$this->validateWebhookSignature($request)) {
                Log::warning('Invalid NinjaOne webhook signature');
                return response()->json(['error' => 'Invalid signature'], 403);
            }

            // Validate required webhook data
            $validator = Validator::make($request->all(), [
                'eventType' => 'required|string',
                'data' => 'required|array',
            ]);

            if ($validator->fails()) {
                return response()->json(['error' => 'Invalid webhook data'], 400);
            }

            $eventType = $request->input('eventType');
            $data = $request->input('data');

            // Process webhook based on event type
            switch ($eventType) {
                case 'alert.created':
                case 'alert.updated':
                    return $this->handleAlertEvent($data);
                
                case 'device.online':
                case 'device.offline':
                    return $this->handleDeviceStatusEvent($data);
                
                case 'alert.resolved':
                    return $this->handleAlertResolved($data);
                
                default:
                    Log::info('Unhandled NinjaOne event type', ['eventType' => $eventType]);
                    return response()->json(['message' => 'Event type not handled'], 200);
            }

        } catch (Exception $e) {
            Log::error('Error processing NinjaOne webhook', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);

            return response()->json(['error' => 'Internal server error'], 500);
        }
    }

    /**
     * Handle alert creation/update events
     */
    protected function handleAlertEvent(array $data): JsonResponse
    {
        try {
            // Extract alert information
            $alertId = $data['alert']['id'] ?? null;
            $deviceId = $data['device']['id'] ?? null;
            $deviceName = $data['device']['name'] ?? $data['device']['displayName'] ?? null;
            $alertType = $data['alert']['type'] ?? 'unknown';
            $severity = $data['alert']['severity'] ?? 'medium';
            $title = $data['alert']['title'] ?? 'NinjaOne Alert';
            $description = $data['alert']['description'] ?? '';
            $createdAt = $data['alert']['createdAt'] ?? now();

            if (!$alertId || (!$deviceId && !$deviceName)) {
                return response()->json(['error' => 'Missing required alert data (alertId and deviceName or deviceId)'], 400);
            }

            // Find the local device by name (primary method)
            $device = null;
            
            if ($deviceName) {
                Log::info('Searching for device by name', ['device_name' => $deviceName]);
                $device = Device::findByName($deviceName);
                
                if ($device) {
                    Log::info('Device found by name matching', [
                        'searched_name' => $deviceName,
                        'found_device' => $device->name,
                        'device_id' => $device->id
                    ]);
                }
            }
            
            // Fallback: try to find by ninjaone_device_id if provided and no name match
            if (!$device && $deviceId) {
                Log::info('Fallback: searching by NinjaOne device ID', ['ninjaone_device_id' => $deviceId]);
                $device = Device::where('ninjaone_device_id', $deviceId)
                               ->where('ninjaone_enabled', true)
                               ->first();
            }

            if (!$device) {
                Log::warning('Device not found for NinjaOne alert', [
                    'device_name' => $deviceName,
                    'ninjaone_device_id' => $deviceId,
                    'alert_id' => $alertId,
                    'suggestion' => 'Create device with exact name: ' . $deviceName
                ]);
                
                // Return helpful error with device name for manual verification
                return response()->json([
                    'message' => 'Device not found in system', 
                    'device_name' => $deviceName,
                    'device_id' => $deviceId,
                    'suggestion' => 'Please create a device with name: ' . $deviceName
                ], 404);
            }

            // Auto-enable NinjaOne for this device if not already enabled
            if (!$device->ninjaone_enabled) {
                $device->update([
                    'ninjaone_enabled' => true,
                    'ninjaone_device_id' => $deviceId,
                ]);
                Log::info('Auto-enabled NinjaOne for device', [
                    'device_id' => $device->id,
                    'device_name' => $device->name
                ]);
            }

            // Create or update alert
            $alert = NinjaOneAlert::updateOrCreate(
                ['ninjaone_alert_id' => $alertId],
                [
                    'ninjaone_device_id' => $deviceId ?? $device->ninjaone_device_id,
                    'device_id' => $device->id,
                    'alert_type' => $alertType,
                    'severity' => $severity,
                    'title' => $title,
                    'description' => $description,
                    'metadata' => $data,
                    'ninjaone_created_at' => $createdAt,
                ]
            );

            // Send notification to device owners
            $this->notificationService->sendNinjaOneAlertNotification($alert);

            Log::info('NinjaOne alert processed successfully', [
                'alert_id' => $alertId,
                'device_id' => $device->id,
                'device_name' => $device->name,
                'severity' => $severity
            ]);

            return response()->json([
                'message' => 'Alert processed successfully',
                'alert_id' => $alert->id,
                'device_name' => $device->name
            ]);

        } catch (Exception $e) {
            Log::error('Error processing NinjaOne alert', [
                'error' => $e->getMessage(),
                'data' => $data
            ]);

            return response()->json(['error' => 'Failed to process alert'], 500);
        }
    }

    /**
     * Handle device status events
     */
    protected function handleDeviceStatusEvent(array $data): JsonResponse
    {
        try {
            $deviceId = $data['device']['id'] ?? null;
            $status = $data['status'] ?? 'unknown';

            if (!$deviceId) {
                return response()->json(['error' => 'Missing device ID'], 400);
            }

            // Update device last seen timestamp
            $device = Device::where('ninjaone_device_id', $deviceId)
                           ->where('ninjaone_enabled', true)
                           ->first();

            if ($device) {
                $device->update([
                    'ninjaone_last_seen' => now(),
                    'ninjaone_metadata' => array_merge(
                        $device->ninjaone_metadata ?? [],
                        ['last_status' => $status]
                    )
                ]);

                Log::info('Device status updated', [
                    'device_id' => $device->id,
                    'ninjaone_device_id' => $deviceId,
                    'status' => $status
                ]);
            }

            return response()->json(['message' => 'Device status updated']);

        } catch (Exception $e) {
            Log::error('Error processing device status event', [
                'error' => $e->getMessage(),
                'data' => $data
            ]);

            return response()->json(['error' => 'Failed to process device status'], 500);
        }
    }

    /**
     * Handle alert resolved events
     */
    protected function handleAlertResolved(array $data): JsonResponse
    {
        try {
            $alertId = $data['alert']['id'] ?? null;

            if (!$alertId) {
                return response()->json(['error' => 'Missing alert ID'], 400);
            }

            $alert = NinjaOneAlert::where('ninjaone_alert_id', $alertId)->first();

            if ($alert) {
                $alert->resolve();

                Log::info('NinjaOne alert resolved', [
                    'alert_id' => $alert->id,
                    'ninjaone_alert_id' => $alertId
                ]);
            }

            return response()->json(['message' => 'Alert resolved']);

        } catch (Exception $e) {
            Log::error('Error resolving NinjaOne alert', [
                'error' => $e->getMessage(),
                'data' => $data
            ]);

            return response()->json(['error' => 'Failed to resolve alert'], 500);
        }
    }

    /**
     * Validate webhook signature (if configured)
     */
    protected function validateWebhookSignature(Request $request): bool
    {
        $secret = config('services.ninjaone.webhook_secret');
        
        // If no secret configured, skip validation
        if (!$secret) {
            Log::info('No webhook secret configured, skipping signature validation');
            return true;
        }

        $signature = $request->header('X-NinjaOne-Signature');
        
        // If no signature provided by NinjaOne, skip validation
        // Some NinjaOne configurations don't support webhook signatures
        if (!$signature) {
            Log::info('No signature provided by NinjaOne, skipping validation (NinjaOne may not support signatures)');
            return true;
        }

        $payload = $request->getContent();
        $expectedSignature = hash_hmac('sha256', $payload, $secret);

        // Log for debugging
        Log::info('Webhook signature validation', [
            'provided_signature' => $signature,
            'expected_signature' => $expectedSignature,
            'payload_length' => strlen($payload),
            'secret_length' => strlen($secret)
        ]);

        return hash_equals($expectedSignature, $signature);
    }
}
